-- title:   Glass
-- author:  yumaikas
-- desc:    short description
-- site:    website link
-- license: MIT License (change this to your license of choice)
-- version: 0.1
-- script:  lua

local T = 0 
 function m() local _1 = {}   return _1 end  
 function zero_question_(p1)  return (p1 == 0) end  
 function mod_question_(p1, p2)  return ((p1 % p2) == 0) end  
 function pos_question_(p1)  return (p1 > 0) end  
 function neg_question_(p1)  return (p1 < 0) end  
 function str(p1)  local _2 = tostring(p1)   return _2 end  
 function sq(p1)  return (p1 * p1) end  
 function _comma_(it, p1) table.insert(it, p1)   end  
 function _plus_x(x, y, dx)  return (x + dx), y end  
 function _plus_y(x, y, dy)  return x, (y + dy) end  
 function _plus__plus_t(it) it.t = (it.t + 1)   end  
 function pos(it)  return it.x, it.y end  
 function target(it)  local _3 = it.target   local _4, _5 = pos(_3)   return _4, _5 end  
 function dist(x1, y1, x2, y2)  local _6 = sq((x1 - x2))   local _7 = sq((y1 - y2))   local _8 = math.sqrt((_6 + _7))   return _8 end  
 function o_dist(a, b)  local _9, _10 = pos(a)   local _11, _12 = pos(b)   local _13 = dist(_9, _10, _11, _12)   return _13 end  
 function norm(x, y)  local _14 = dist(0, x, 0, y)  local l = _14 
     
  return (x / l), (y / l) end  
 function tik(it) it:tic()   end  

 function to_pos(it, p1, p2) it.y = p2  it.x = p1   end  
 function _plus_xy(x, y, dx, dy)  return (x + dx), (y + dy) end  
 function _xy(x, y, dx, dy)  return (x - dx), (y - dy) end  
 function _mult_xy(x, y, m)  return (x * m), (y * m) end  
 function cell_mid(p1, p2)  return ((p1 * 8) + 4), ((p2 * 8) + 4) end  
 function tpick(t)  local _15 = math.random(1, #t)   return t[_15] end  
 function t_nil_rand(t)  local _16 = pos_question_(#t)   if _16 then  local _17 = math.random(1, #t)  t[_17] = nil  end   end  
 function dX(p1)  local _18 = math.random(1, p1)   return _18 end  

 function mov(it, p1, p2) it.y = (p2 + it.y)  it.x = (p1 + it.x)   end  
 function pt_bang_(p1, p2, p3) pix(p1, p2, p3)   end  
 function _lt_xy_gt_(p1, p2) local _19 = {}  to_pos(_19, p1, p2)   return _19 end  

 function sxy_mid(p1, p2)  local _20 = mget((p1 / 8), (p2 / 8))   return _20 end  
 function sxy_solid_question_(p1, p2)  local _21 = sxy_mid(p1, p2)   local _22 = fget(_21, 0)   return _22 end  
 function solid_around_question_(x, y)  
 function s_question_(p1, p2)  local _23 = sxy_solid_question_(p1, p2)   return _23 end  
  local _24, _25 = _plus_y(x, y, -1)   local _26 = s_question_(_24, _25)   
  local _27, _28 = _plus_y(x, y, 1)   local _29 = s_question_(_27, _28)  
  local _30, _31 = _plus_x(x, y, 1)   local _32 = s_question_(_30, _31)  
  local _33, _34 = _plus_x(x, y, -1)   local _35 = s_question_(_33, _34)   return (((_26 and _29) and _32) and _35) end  

 local f_hv,f_v,f_h,no_f = 3, 2, 1, 0 
 local r_270,r_180,r_90,no_r = 3, 2, 1, 0 
 function _mult_frame_mult_(p1, p2, p3, p4) local _36 = {}  _36.d = p4  _36.r = p3  _36.f = p2  _36.id = p1   return _36 end  
 function flipped(id, f)  local _37 = _mult_frame_mult_(id, f_h, no_r, f)   return _37 end  
 function frame(id, f)  local _38 = _mult_frame_mult_(id, no_f, no_r, f)   return _38 end  

 local B_Y,B_X,B_B,B_A,B_R,B_L,B_D,B_U = 7, 6, 5, 4, 3, 2, 1, 0 
 function bt_question_(it, p1)  local _39 = btn((p1 + ((it - 1) * 8)))   return _39 end  

 function facing(x)  local _40 if (x == 0) then _40 = 0 else  local _41 if (x > 0) then _41 = 1 else _41 = -1  end  _40 = _41  end   return _40 end  
 function p_xyf(p1) 
     local y,x = 0, 0 
  local _42 = bt_question_(p1, B_U)   if _42 then y = y-1  end  
  local _43 = bt_question_(p1, B_D)   if _43 then y = y+1  end  
  local _44 = bt_question_(p1, B_L)   if _44 then x = x-1  end  
  local _45 = bt_question_(p1, B_R)   if _45 then x = x+1  end  
  local _46 = facing(x)   return x, y, _46 end  


  local _47 = m()  local anim = _47  
 function anim.new(p1) local _48 = {}  _48.frames = p1  _48.t = 0  _48.f = 1   return _48 end  
 function anim.frame(it)  return it.frames[it.f] end  
 function anim.draw(it, x, y)  local _49 = anim.frame(it)  spr(_49.id, x, y, 0, 1, _49.f, _49.r)   end  
 function anim.next_frame(it) it.f = (it.f + 1)   if (it.f > #it.frames) then it.f = 1   end   end  
 function anim.tic(it)  local _50 = anim.frame(it)   if (_50.d < it.t) then it.t = 0  anim.next_frame(it)   end  _plus__plus_t(it)   end  

 function filter(it, pred) local coll = it  
  for _51 = #coll,1,-1 do  local _52 = pred(coll[_51])   if not _52 then table.remove(coll, _51)   end   end   end  

 function p_sprites(it)  
   local _53 = {}   local _54 = frame(491, 6)  _comma_(_53, _54)   local _55 = frame(507, 6)  _comma_(_53, _55)   local _56 = anim.new(_53)  it.right = _56  
   local _57 = {}   local _58 = flipped(491, 6)  _comma_(_57, _58)   local _59 = flipped(507, 6)  _comma_(_57, _59)   local _60 = anim.new(_57)  it.left = _60   
   local _61 = {}   local _62 = frame(491, 60)  _comma_(_61, _62)   local _63 = anim.new(_61)  it.stand_right = _63  
   local _64 = {}   local _65 = flipped(491, 60)  _comma_(_64, _65)   local _66 = anim.new(_64)  it.stand_left = _66   end  

 function splat(x, y, id) local _67 = {}  to_pos(_67, x, y)  _67.t = 1  
     local addr = (32768 + (id * 64))  for _68 = 0,63 do  local _69 = peek4((_68 + addr))  _comma_(_67, _69)   end  
 local spl = _67 
 function spl.alive(it)  local _70 = pos_question_(#it)   return _70 end  
 function spl.tic(it)   
      local _71 = pos_question_(#it)   if _71 then 
          for _72 = 0,7 do y = _72  for _73 = 0,7 do x = _73 
             local idx = ((x + 1) + (y * 8))  
             local c = it[idx] 
              if c then  local _74, _75 = pos(it)   local _76, _77 = _plus_xy(x, y, -4, -4)   local _78, _79 = _mult_xy(_76, _77, it.t)   local _80, _81 = _plus_xy(_74, _75, _78, _79)  pt_bang_(_80, _81, c)   end  
          end   end  
          local _82 = dX(32)  it[_82] = nil 
          local _83 = dX(32)  it[(_83 + 32)] = nil 
         it.t = (it.t + 0.08)  
      end  
  end   return spl end  
    
 local _84 = {}  local _85 = {}  _84.enemies = _85  local _86 = {}  _84.spawns = _86  local mobs = _84 

 function mob_balloon(p1, p2) local _87 = {}  to_pos(_87, p1, p2)    
 local _88 = {}   
  local _89 = {}   local _90 = flipped(267, 24)  _comma_(_89, _90)   local _91 = flipped(283, 24)  _comma_(_89, _91)   local _92 = anim.new(_89)  _88.left = _92   
  local _93 = {}   local _94 = frame(267, 24)  _comma_(_93, _94)   local _95 = frame(283, 24)  _comma_(_93, _95)   local _96 = anim.new(_93)  _88.right = _96   
 _87.anims = _88  
 _87.live = true  
  local _97 = tpick(mobs.spawns)  _87.target = _97  
 local ball = _87 
 function ball.tic(it) local me = it 
      local _98, _99 = target(it)   local _100, _101 = pos(it)   local _102 = dist(_98, _99, _100, _101)   if (_102 < 2) then  local _103 = tpick(mobs.spawns)  it.target = _103   end  
      local _104, _105 = target(it)   local _106, _107 = pos(it)   local _108, _109 = _xy(_104, _105, _106, _107)  local dy,dx = _109, _108  local _110, _111 = norm(dx, dy)   local _112, _113 = _mult_xy(_110, _111, 0.5)  mov(it, _112, _113)  
      local _114 = pos_question_(dx)   local _115 if _114 then _115 = it.anims.right else _115 = it.anims.left  end  anim.tic(_115)   local _116, _117 = pos(me)   local _118, _119 = _xy(_116, _117, 4, 4)  anim.draw(_115, _118, _119)   end  
 function ball.alive(it)  return it.live end  
 function ball.hurt(it) it.live = false   end  
   return ball end  

 function mobs.add(it, p1)  local _120 = it.enemies  _comma_(_120, p1)   end  
 function mobs.spawner(p1, p2)  local _121 = _lt_xy_gt_(p1, p2)  _comma_(mobs.spawns, _121)   end  
 function mobs.tic() 
      local _122 = mod_question_(T, 60)   if _122 then  local _123 = tpick(mobs.spawns)   local _124, _125 = pos(_123)   local _126 = mob_balloon(_124, _125)  mobs.add(mobs, _126)   end  
      for _, _127 in ipairs(mobs.enemies) do _127:tic()   end  
      local _128 = mobs.enemies  filter(_128,  function (p1)  local _129 = p1:alive()   return _129 end )  
  end  

  local _130 = m()  local bullets = _130 
 function bullets.spawn(p1, p2, p3, p4) local _131 = {}  _131.dy = p4  _131.dx = p3  to_pos(_131, p1, p2)  _131.t = 1  _comma_(bullets, _131)   end  
 function bullets.hurt(it) it.t = 121   end  
 function bullets.alive(it)  return (it.t < 120) end  
 function bullets.tic() 
      for _, _132 in ipairs(bullets) do mov(_132, (_132.dx * 3), _132.dy)  _plus__plus_t(_132)   end   
      for _, _133 in ipairs(mobs.enemies) do m = _133  for _, _134 in ipairs(bullets) do local b = _134 
          local _135 = o_dist(m, b)   local _136 = bullets.alive(b)   if (m.hurt and ((_135 < 4) and _136)) then  
             m:hurt()  bullets.hurt(b)   
              local _137, _138 = pos(m)   local _139 = splat(_137, _138, 283)  mobs.add(mobs, _139)  
          end  
      end   end  
     filter(bullets,  function (p1)  local _140 = bullets.alive(p1)   return _140 end )   end  
 function bullets.draw()  
      for _, _141 in ipairs(bullets) do  local _142, _143 = pos(_141)   local _144, _145 = _plus_x(_142, _143, _141.dx)  pix(_144, _145, 2)   local _146, _147 = pos(_141)   local _148, _149 = _plus_xy((_141.dx * 3), _141.dy, _146, _147)  pix(_148, _149, 4)   end   
  end  

 local _150 = {}  local _151 = {}  _150.starts = _151  local player = _150 
 function player.new()  
 local _152 = {}  _152.x = 40  _152.y = 35  _152.facing = 1  local _153 = {}  p_sprites(_153)  _152.anims = _153   
     _152.gt = 0  _152.t = 0  _152.last_facing = 1   return _152 end  

 function player.anim(it, name)  
  local _154, _155 = pos(it)   local _156, _157 = _plus_xy(_154, _155, -4, -7)   local _158 = it.anims[name]  anim.draw(_158, _156, _157)   end  

 function player.draw(it)  local _159 if ((it.facing == 0) and (it.last_facing < 0)) then _159 = "stand_left"  elseif ((it.facing == 0) and (it.last_facing > 0)) then _159 = "stand_right"  elseif (it.facing > 0) then _159 = "right"  elseif true then _159 = "left"  end  player.anim(it, _159)   end  

 function player.move(it, dx, dy)  
  local _160, _161 = pos(it)   local _162, _163 = _plus_xy(_160, _161, dx, 0)   local _164 = solid_around_question_(_162, _163)   if _164 then mov(it, dx, 0)   end  
  local _165, _166 = pos(it)   local _167, _168 = _plus_xy(_165, _166, 0, dy)   local _169 = solid_around_question_(_167, _168)   if _169 then mov(it, 0, dy)   end   end  

 function player.tic(it)  
  local _170, _171, _172 = p_xyf(1)  local f,dy,dx = _172, _171, _170 it.facing = f   
  local _173 = zero_question_(dy)   if not _173 then it.facing = it.last_facing   end  
  local _174 = zero_question_(f)   if not _174 then it.last_facing = f   end  
  if ((it.t % 3) ~= 0) then player.move(it, dx, dy)   end   
 player.draw(it)   
  local _175 = 1   local _176 = bt_question_(_175, B_A)   if (_176 and (it.gt <= 0)) then  
       local _177, _178 = pos(it)  bullets.spawn(_177, (_178 - 3), it.last_facing, 0)  it.gt = 12   
  end   
  local _179 = math.max((it.gt - 1), 0)  it.gt = _179  
 _plus__plus_t(it)  
  if (it.facing == 1) then  local _180 = it.anims.right  anim.tic(_180)   elseif (it.facing == -1) then  local _181 = it.anims.left  anim.tic(_181)   end   end  



 function remap(p1) local t = p1  local _182 if (t == 2) then _182 = 0 else _182 = t  end   return _182 end   
 function map_tic() map(0, 0, 30, 17, 0, 0, -1, 1, remap)   end  

  local _183 = player.new()  local p_1 = _183 
 local mode = nil 

 function game()  
 cls(8)   
 map_tic()   
 player.tic(p_1)   
 mobs.tic()  
 bullets.tic()  bullets.draw()   end  

 function mscan(x, y)  local _184 = mget(x, y)  local id = _184 
  if (id == 2) then  local _185, _186 = cell_mid(x, y)  mobs.spawner(_185, _186)   end   
  if (id == 1) then  local _187, _188 = cell_mid(x, y)   local _189 = _lt_xy_gt_(_187, _188)  _comma_(player.starts, _189)   end   end  

 function BOOT()  
    
     poke(16376, 10)  
      for _190 = 0,30 do local mx = _190  for _191 = 0,17 do local my = _191 mscan(mx, my)   end   end   
      local _192 = tpick(player.starts)   local _193, _194 = pos(_192)  to_pos(p_1, _193, _194)  
     mode = game  end  

 function TIC() mode()  T = T+1  end     

  

-- <TILES>
-- 001:6666666666666616666166666666666661666666666666661666661666666666
-- 002:2222222222222222222222222222222222222222222222222222222222222222
-- 017:6666666666666616666166666666666661666666666666661666661666666666
-- </TILES>

-- <SPRITES>
-- 001:0000000000000000050005000050005000505050005656500666666061111116
-- 002:0333333033222233323223233223322332233223323223233322223303333330
-- 003:0000000000000000000600600006060006060600060600600660666006666660
-- 004:0006660006666060660666666666666665656565066666600066660001111110
-- 005:0000000000000000000330000023320000233200002332000002200000233200
-- 006:0000000000200200203333022233332222311322023333200022220002333320
-- 009:0000000000000000000300000034300000343000003330000033330000333330
-- 010:0000000000000000000000000600000000666660066464600066660006066060
-- 011:0050000000055550505555550555555550554545000555500000550000000000
-- 012:0000000000000000000000000011111001111141001111100000000000000000
-- 015:0000000004000000000000400003000004000003000000403000000000000000
-- 017:0000000000000000000000000000000000000000000050000566656061111116
-- 018:0000000000000000000000000000000000000000000000000320203023333332
-- 019:0000000000000000000000000000000000000000000000000000000006666660
-- 020:5000600006060605006000600060000060066050066006005000060000066050
-- 021:0000000000000000000000000000000000000000000000000020000002332320
-- 022:0000000000000000000000000000000000000000000000000020000002332320
-- 025:0000000000000000000000000003000000343000003330000033330000333333
-- 026:0000000000000000000000000600000000666660066464600066660000666600
-- 027:0050000000055550005555555555555500554545000555500000550000000000
-- 031:060000000b666600066666600666666006646460006666000606606000000000
-- 033:0000000000000000000200000201020001010100011111000011100001111100
-- 034:0000000000000000000000000000000000020000002120000212120021212120
-- 041:0000000000070700000000000701111000141111070111100000000000070700
-- 046:0000000000000000000022220002111100211111002114410021141100211111
-- 047:0000000000000000222000001112000011112000144120001411200011112000
-- 049:0000000000000000000000000000000000000000000000000000100001111101
-- 057:0000000000007070000000000001111070141111000111100000000000007070
-- 062:0002113100021313000021110000212100000202000000000000000000000000
-- 063:3112000013120000112000002120000002000000000000000000000000000000
-- 141:0000000000033000000730000000320000023200000232000000300000030300
-- 142:0000300000007000000232000002320000023200000030000003030000000000
-- 143:0000000000033000000370000023000000232000002320000003000000303000
-- 235:0000000000000000002220000022700000021111002312300002200000303000
-- 236:0000000000001000002222000022220000033000002222000002200000303000
-- 237:0000000000222200002772000003300000213200000120000001300000010000
-- 238:0000000000222200002772100003310000211200001120000003300000000000
-- 251:0000000000000000002220000022700000021111002312300002200000033000
-- 252:0000000000001000002222000022220000033000002222000002200000033000
-- 253:0000000000222200002772000003300000213200000120000001030000010000
-- 254:0000000000222000002270100003310000231300002120000003300000000000
-- </SPRITES>

-- <SPRITES1>
-- 001:0000000000222200020022000200020002000200022002000022220000000000
-- </SPRITES1>

-- <MAP>
-- 001:000000000000000000000020202020200000000000000000000000000000000000002000000010101010101010101010101010101010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:000000000000000000000000000000000000000000000000000000000000000000002000101010000000000000000010101010101010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:002020202000001000000000000000001010100000000000002020202000000000002010102020202020000000000010202020201010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:002020202000001010000000000000000010100000000000002020202000000000002010002020202020000000000010202020201010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:002020202000000010101010101010101010100000000000002020202000000000002010000000000000000010101010202020201010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:002020202000000000001010101010101010101010100000002020202000000000001010101010101010101010101010101010101010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:002020202000001000101010000000000010100010100000002020202000000000002010202020101010101000000000000020200010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:002020202000001010101010001100110010101010100000002020202000000000002010202020102020201000000000002000002010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:002020202000000010101000110011001010101010100000002020202000000000002010202010102020201000000000002000002010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:002020202000000000101000000000001010100010100000002020202000000000202010202010202020201010101010101020201010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 011:002020202000000000001010101010101010101010100000002020202000000000202010101010101010101010101010101010101010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 012:002020202000000010101010101010101010100000000000002020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 013:002020202000000010100000000000001010101010000000002020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 014:002020202000000010101000000000000000101010000000002020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 016:000000000000000000000020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- 003:2433d8d25a79150ae66d0d34cda51a05
-- </WAVES>

-- <SFX>
-- 000:f30ae30ac3095e093f092e090b0903094d098d08a400cb00df00d300d100e000e300e300e300e300e300f300f300f300f300f300f300f000e200e200101000000000
-- 001:f3eae3fac3f95ef93ff92ef90bf903594df98de8a4e0cb00df00d300d100e000e300e300e300e300e300f300f300f300f300f300f300f000f200f200231000000000
-- 002:f30ae30ac3095e093f092e090b0903094d098d08a400cb00df00d300d100e000e300e300e300e300e300f300f300f300f300f300f300f000f200f200236000000000
-- </SFX>

-- <TRACKS>
-- 000:100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </TRACKS>

-- <FLAGS>

-- </FLAGS>

-- <PALETTE>
-- 000:1c284c5d275db13e53ef7d57ffcd7581d27028895025b2f2040000080800000000000000000000000000000000000000
-- 001:1a1c2c5d275db13e53ef7d57ffcd75a7f07028895025b2f2040000080800000000000000000000000000000000000000
-- </PALETTE>

-- <PALETTE1>
-- 000:1a1c2c5d275db13e53ef7d57ffcd75a7f07028895025b2f2040000080800000000000000000000000000000000000000
-- </PALETTE1>

